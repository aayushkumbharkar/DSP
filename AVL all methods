#include <stdio.h>
#include <stdlib.h>

// Definition of a node in AVL tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
    int height;
};

// Function to get the height of the node
int height(struct Node* node) {
    if (node == NULL)
        return 0;
    return node->height;
}

// Function to get the balance factor of the node
int getBalance(struct Node* node) {
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}

// Function to perform right rotation
struct Node* rightRotate(struct Node* y) {
    struct Node* x = y->left;
    struct Node* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));

    // Return new root
    return x;
}

// Function to perform left rotation
struct Node* leftRotate(struct Node* x) {
    struct Node* y = x->right;
    struct Node* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = 1 + (height(x->left) > height(x->right) ? height(x->left) : height(x->right));
    y->height = 1 + (height(y->left) > height(y->right) ? height(y->left) : height(y->right));

    // Return new root
    return y;
}

// Function to insert a node in AVL tree
struct Node* insert(struct Node* node, int key) {
    // Step 1: Perform normal BST insert
    if (node == NULL) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = key;
        newNode->left = newNode->right = NULL;
        newNode->height = 1;
        return newNode;
    }

    if (key < node->data)
        node->left = insert(node->left, key);
    else if (key > node->data)
        node->right = insert(node->right, key);
    else // Duplicate keys not allowed
        return node;

    // Step 2: Update the height of this ancestor node
    node->height = 1 + (height(node->left) > height(node->right) ? height(node->left) : height(node->right));

    // Step 3: Get the balance factor and balance the tree
    int balance = getBalance(node);

    // Left Left case
    if (balance > 1 && key < node->left->data)
        return rightRotate(node);

    // Right Right case
    if (balance < -1 && key > node->right->data)
        return leftRotate(node);

    // Left Right case
    if (balance > 1 && key > node->left->data) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Right Left case
    if (balance < -1 && key < node->right->data) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    // Return the (unchanged) node pointer
    return node;
}

// Function to do an inorder traversal of the tree
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        // Print the node data along with its balance factor
        printf("%d (BF: %d) ", root->data, getBalance(root));
        inorder(root->right);
    }
}

// Function to print the root node's data and balance factor
void printRootNode(struct Node* root) {
    if (root != NULL) {
        printf("Root Node: %d (Balance Factor: %d)\n", root->data, getBalance(root));
    } else {
        printf("The tree is empty.\n");
    }
}

// Main function to test the AVL Tree implementation
int main() {
    struct Node* root = NULL;

    // Insert nodes
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 25);
    root = insert(root, 5);

    // Display the root node
    printRootNode(root);

    // Inorder traversal of the tree with balance factors
    printf("Inorder traversal of the AVL tree with balance factors: \n");
    inorder(root);
    printf("\n");

    return 0;
}


